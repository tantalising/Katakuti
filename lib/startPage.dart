import 'dart:ui';
import 'package:flutter/cupertino.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/material.dart';
import 'startPageBanner.dart';
import 'PageActions.dart';

class StartPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final width = MediaQuery.of(context).size.width * 0.9;
    final height = MediaQuery.of(context).size.height * 0.6;

    return SafeArea(
      child: Scaffold(
        body: Column(
          children: [
            StartPageBanner(
              width: width,
              height: height,
            ),
            Container(
              padding: EdgeInsets.only(top: width / 3),
              child: Center(
                child: FrontPage(
                  width: width,
                  height: height,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class FrontPage extends StatelessWidget {
  final double width;
  final double height;
  final int tableLength; // In a n x n table n = tableLength;
  final Function
      cellContentSupplier; // The function yielding child widget customized as per the id that is generated from iterating over the tablePosition;
  final bool disableAllBorder;

  const FrontPage({
    Key key,
    @required this.width,
    @required this.height,
    this.tableLength: 3,
    this.cellContentSupplier,
    this.disableAllBorder: false,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final tablePosition = [
      for (var i = 0; i < tableLength; i++) i + 1
    ]; // This is actually used as a iterable for
    // generating the table like this:
    // for row in tablePosition: for column in tablePosition: render the cells

    return Container(
      alignment: Alignment.center,
      width: width,
      height: height,
      child: Table(
        children: tablePosition
            .map(
              (row) => TableRow(
                  children: tablePosition
                      .map(
                        (column) => CellContent(
                          width: width,
                          height: height,
                          disableAllBorder: disableAllBorder,
                          cellId: (row - 1) * tableLength + (column - 1),
                          cellContentSupplier: cellContentSupplier,
                        ),
                      )
                      .toList()),
            )
            .toList(),
      ),
    );
  }
}

// Cell of the table of size 3x3
class CellContent extends StatelessWidget {
  final double width;
  final double height;
  final int cellId;
  final Function cellContentSupplier;
  final bool disableAllBorder;

  const CellContent({
    Key key,
    @required this.width,
    @required this.height,
    @required this.cellId, // Cell number generated by aforementioned mapping
    @required this.cellContentSupplier,
    this.disableAllBorder: false,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    Color bottomColor = Theme.of(context).primaryColor.withOpacity(0.6);
    Color topColor = Theme.of(context).primaryColor.withOpacity(0.6);
    Color leftColor = Theme.of(context).primaryColor.withOpacity(0.6);
    Color rightColor = Theme.of(context).primaryColor.withOpacity(0.6);

    // Disable the required borders
    switch (cellId) {
      case 0:
        topColor = Colors.transparent;
        leftColor = Colors.transparent;
        break;

      case 1:
        topColor = Colors.transparent;
        break;

      case 2:
        topColor = Colors.transparent;
        rightColor = Colors.transparent;
        break;

      case 3:
        leftColor = Colors.transparent;
        break;

      case 4:
        break;

      case 5:
        rightColor = Colors.transparent;
        break;

      case 6:
        leftColor = Colors.transparent;
        bottomColor = Colors.transparent;
        break;

      case 7:
        bottomColor = Colors.transparent;
        break;

      case 8:
        rightColor = Colors.transparent;
        bottomColor = Colors.transparent;
    }

    if (disableAllBorder) {
      bottomColor = Colors.transparent;
      topColor = Colors.transparent;
      leftColor = Colors.transparent;
      rightColor = Colors.transparent;
    }

    // Return the made cell
    return Container(
      alignment: Alignment.center,
      width: width / 3,
      height: height / 3,
      decoration: BoxDecoration(
        border: Border(
          bottom: BorderSide(color: bottomColor),
          top: BorderSide(color: topColor),
          left: BorderSide(color: leftColor),
          right: BorderSide(color: rightColor),
        ),
      ),
      child: ActionButtons(
        cellId: cellId,
        fontSize: width / 18,
        cellContentSupplier: cellContentSupplier,
      ),
    );
  }
}
